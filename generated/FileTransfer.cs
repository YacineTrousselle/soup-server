//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `FileTransfer.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace Demo
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface FileTransfer : global::Ice.Object, FileTransferOperations_
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface DataReceiver : global::Ice.Object, DataReceiverOperations_
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface FileSender : global::Ice.Object, FileSenderOperations_
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface SearchSongs : global::Ice.Object, SearchSongsOperations_
    {
    }

    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [global::System.Serializable]
    public partial class SongData : global::System.ICloneable
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public string title;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public string[] artists;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public int filesize;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public SongData()
        {
            this.title = "";
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public SongData(string title, string[] artists, int filesize)
        {
            this.title = title;
            this.artists = artists;
            this.filesize = filesize;
            ice_initialize();
        }

        #endregion

        #region ICloneable members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public object Clone()
        {
            return MemberwiseClone();
        }

        #endregion

        #region Object members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public override int GetHashCode()
        {
            int h_ = 5381;
            global::IceInternal.HashUtil.hashAdd(ref h_, "::Demo::SongData");
            global::IceInternal.HashUtil.hashAdd(ref h_, title);
            global::IceInternal.HashUtil.hashAdd(ref h_, artists);
            global::IceInternal.HashUtil.hashAdd(ref h_, filesize);
            return h_;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public override bool Equals(object other)
        {
            if(object.ReferenceEquals(this, other))
            {
                return true;
            }
            if(other == null)
            {
                return false;
            }
            if(GetType() != other.GetType())
            {
                return false;
            }
            SongData o = (SongData)other;
            if(this.title == null)
            {
                if(o.title != null)
                {
                    return false;
                }
            }
            else
            {
                if(!this.title.Equals(o.title))
                {
                    return false;
                }
            }
            if(this.artists == null)
            {
                if(o.artists != null)
                {
                    return false;
                }
            }
            else
            {
                if(!IceUtilInternal.Arrays.Equals(this.artists, o.artists))
                {
                    return false;
                }
            }
            if(!this.filesize.Equals(o.filesize))
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public static bool operator==(SongData lhs, SongData rhs)
        {
            return Equals(lhs, rhs);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public static bool operator!=(SongData lhs, SongData rhs)
        {
            return !Equals(lhs, rhs);
        }

        #endregion

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public void ice_writeMembers(global::Ice.OutputStream ostr)
        {
            ostr.writeString(this.title);
            StringsHelper.write(ostr, this.artists);
            ostr.writeInt(this.filesize);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public void ice_readMembers(global::Ice.InputStream istr)
        {
            this.title = istr.readString();
            this.artists = StringsHelper.read(istr);
            this.filesize = istr.readInt();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public static void ice_write(global::Ice.OutputStream ostr, SongData v)
        {
            if(v == null)
            {
                _nullMarshalValue.ice_writeMembers(ostr);
            }
            else
            {
                v.ice_writeMembers(ostr);
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public static SongData ice_read(global::Ice.InputStream istr)
        {
            var v = new SongData();
            v.ice_readMembers(istr);
            return v;
        }

        private static readonly SongData _nullMarshalValue = new SongData();

        #endregion
    }
}

namespace Demo
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_FileTransfer_sendChunk();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_FileTransfer_completeTransfer();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_DataReceiver_receiveChunk();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_DataReceiver_completeTransfer();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_FileSender_sendFile();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_SearchSongs_search(string[] ret);
}

namespace Demo
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface FileTransferPrx : global::Ice.ObjectPrx
    {
        void sendChunk(byte[] data, string uniqueId, int pos, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task sendChunkAsync(byte[] data, string uniqueId, int pos, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_FileTransfer_sendChunk> begin_sendChunk(byte[] data, string uniqueId, int pos, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_sendChunk(byte[] data, string uniqueId, int pos, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_sendChunk(byte[] data, string uniqueId, int pos, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_sendChunk(global::Ice.AsyncResult asyncResult);

        void completeTransfer(string uniqueId, string title, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task completeTransferAsync(string uniqueId, string title, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_FileTransfer_completeTransfer> begin_completeTransfer(string uniqueId, string title, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_completeTransfer(string uniqueId, string title, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_completeTransfer(string uniqueId, string title, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_completeTransfer(global::Ice.AsyncResult asyncResult);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface DataReceiverPrx : global::Ice.ObjectPrx
    {
        void receiveChunk(byte[] data, string uniqueId, int pos, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task receiveChunkAsync(byte[] data, string uniqueId, int pos, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_DataReceiver_receiveChunk> begin_receiveChunk(byte[] data, string uniqueId, int pos, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_receiveChunk(byte[] data, string uniqueId, int pos, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_receiveChunk(byte[] data, string uniqueId, int pos, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_receiveChunk(global::Ice.AsyncResult asyncResult);

        void completeTransfer(string uniqueId, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task completeTransferAsync(string uniqueId, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_DataReceiver_completeTransfer> begin_completeTransfer(string uniqueId, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_completeTransfer(string uniqueId, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_completeTransfer(string uniqueId, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_completeTransfer(global::Ice.AsyncResult asyncResult);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface FileSenderPrx : global::Ice.ObjectPrx
    {
        void sendFile(DataReceiverPrx proxy, string title, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task sendFileAsync(DataReceiverPrx proxy, string title, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_FileSender_sendFile> begin_sendFile(DataReceiverPrx proxy, string title, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_sendFile(DataReceiverPrx proxy, string title, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_sendFile(DataReceiverPrx proxy, string title, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_sendFile(global::Ice.AsyncResult asyncResult);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface SearchSongsPrx : global::Ice.ObjectPrx
    {
        string[] search(string search, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<string[]> searchAsync(string search, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_SearchSongs_search> begin_search(string search, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_search(string search, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_search(string search, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        string[] end_search(global::Ice.AsyncResult asyncResult);
    }
}

namespace Demo
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface FileTransferOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void sendChunk(byte[] data, string uniqueId, int pos, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void completeTransfer(string uniqueId, string title, global::Ice.Current current = null);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface DataReceiverOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void receiveChunk(byte[] data, string uniqueId, int pos, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void completeTransfer(string uniqueId, global::Ice.Current current = null);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface FileSenderOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void sendFile(DataReceiverPrx proxy, string title, global::Ice.Current current = null);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface SearchSongsOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        string[] search(string search, global::Ice.Current current = null);
    }
}

namespace Demo
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public sealed class BytesHelper
    {
        public static void write(global::Ice.OutputStream ostr, byte[] v)
        {
            ostr.writeByteSeq(v);
        }

        public static byte[] read(global::Ice.InputStream istr)
        {
            byte[] v;
            v = istr.readByteSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public sealed class StringsHelper
    {
        public static void write(global::Ice.OutputStream ostr, string[] v)
        {
            ostr.writeStringSeq(v);
        }

        public static string[] read(global::Ice.InputStream istr)
        {
            string[] v;
            v = istr.readStringSeq();
            return v;
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    [global::System.Serializable]
    public sealed class FileTransferPrxHelper : global::Ice.ObjectPrxHelperBase, FileTransferPrx
    {
        public FileTransferPrxHelper()
        {
        }

        public FileTransferPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public void sendChunk(byte[] data, string uniqueId, int pos, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_sendChunkAsync(data, uniqueId, pos, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void completeTransfer(string uniqueId, string title, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_completeTransferAsync(uniqueId, title, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task sendChunkAsync(byte[] data, string uniqueId, int pos, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_sendChunkAsync(data, uniqueId, pos, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_sendChunkAsync(byte[] iceP_data, string iceP_uniqueId, int iceP_pos, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_sendChunk(iceP_data, iceP_uniqueId, iceP_pos, context, synchronous, completed);
            return completed.Task;
        }

        private const string _sendChunk_name = "sendChunk";

        private void _iceI_sendChunk(byte[] iceP_data, string iceP_uniqueId, int iceP_pos, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _sendChunk_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    BytesHelper.write(ostr, iceP_data);
                    ostr.writeString(iceP_uniqueId);
                    ostr.writeInt(iceP_pos);
                });
        }

        public global::System.Threading.Tasks.Task completeTransferAsync(string uniqueId, string title, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_completeTransferAsync(uniqueId, title, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_completeTransferAsync(string iceP_uniqueId, string iceP_title, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_completeTransfer(iceP_uniqueId, iceP_title, context, synchronous, completed);
            return completed.Task;
        }

        private const string _completeTransfer_name = "completeTransfer";

        private void _iceI_completeTransfer(string iceP_uniqueId, string iceP_title, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _completeTransfer_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_uniqueId);
                    ostr.writeString(iceP_title);
                });
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_FileTransfer_sendChunk> begin_sendChunk(byte[] data, string uniqueId, int pos, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_sendChunk(data, uniqueId, pos, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_sendChunk(byte[] data, string uniqueId, int pos, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_sendChunk(data, uniqueId, pos, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_sendChunk(byte[] data, string uniqueId, int pos, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_sendChunk(data, uniqueId, pos, context, callback, cookie, false);
        }

        public void end_sendChunk(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _sendChunk_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_FileTransfer_sendChunk> begin_sendChunk(byte[] iceP_data, string iceP_uniqueId, int iceP_pos, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_FileTransfer_sendChunk, object>(
                (Callback_FileTransfer_sendChunk cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _sendChunk_name, cookie, completedCallback);
            _iceI_sendChunk(iceP_data, iceP_uniqueId, iceP_pos, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_FileTransfer_completeTransfer> begin_completeTransfer(string uniqueId, string title, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_completeTransfer(uniqueId, title, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_completeTransfer(string uniqueId, string title, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_completeTransfer(uniqueId, title, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_completeTransfer(string uniqueId, string title, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_completeTransfer(uniqueId, title, context, callback, cookie, false);
        }

        public void end_completeTransfer(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _completeTransfer_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_FileTransfer_completeTransfer> begin_completeTransfer(string iceP_uniqueId, string iceP_title, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_FileTransfer_completeTransfer, object>(
                (Callback_FileTransfer_completeTransfer cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _completeTransfer_name, cookie, completedCallback);
            _iceI_completeTransfer(iceP_uniqueId, iceP_title, context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static FileTransferPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            FileTransferPrx r = b as FileTransferPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                FileTransferPrxHelper h = new FileTransferPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static FileTransferPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            FileTransferPrx r = b as FileTransferPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                FileTransferPrxHelper h = new FileTransferPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static FileTransferPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    FileTransferPrxHelper h = new FileTransferPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static FileTransferPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    FileTransferPrxHelper h = new FileTransferPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static FileTransferPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            FileTransferPrx r = b as FileTransferPrx;
            if(r == null)
            {
                FileTransferPrxHelper h = new FileTransferPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static FileTransferPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            FileTransferPrxHelper h = new FileTransferPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Demo::FileTransfer",
            "::Ice::Object"
        };

        public static string ice_staticId()
        {
            return _ids[0];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, FileTransferPrx v)
        {
            ostr.writeProxy(v);
        }

        public static FileTransferPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                FileTransferPrxHelper result = new FileTransferPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    [global::System.Serializable]
    public sealed class DataReceiverPrxHelper : global::Ice.ObjectPrxHelperBase, DataReceiverPrx
    {
        public DataReceiverPrxHelper()
        {
        }

        public DataReceiverPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public void receiveChunk(byte[] data, string uniqueId, int pos, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_receiveChunkAsync(data, uniqueId, pos, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void completeTransfer(string uniqueId, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_completeTransferAsync(uniqueId, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task receiveChunkAsync(byte[] data, string uniqueId, int pos, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_receiveChunkAsync(data, uniqueId, pos, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_receiveChunkAsync(byte[] iceP_data, string iceP_uniqueId, int iceP_pos, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_receiveChunk(iceP_data, iceP_uniqueId, iceP_pos, context, synchronous, completed);
            return completed.Task;
        }

        private const string _receiveChunk_name = "receiveChunk";

        private void _iceI_receiveChunk(byte[] iceP_data, string iceP_uniqueId, int iceP_pos, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _receiveChunk_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    BytesHelper.write(ostr, iceP_data);
                    ostr.writeString(iceP_uniqueId);
                    ostr.writeInt(iceP_pos);
                });
        }

        public global::System.Threading.Tasks.Task completeTransferAsync(string uniqueId, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_completeTransferAsync(uniqueId, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_completeTransferAsync(string iceP_uniqueId, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_completeTransfer(iceP_uniqueId, context, synchronous, completed);
            return completed.Task;
        }

        private const string _completeTransfer_name = "completeTransfer";

        private void _iceI_completeTransfer(string iceP_uniqueId, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _completeTransfer_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_uniqueId);
                });
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_DataReceiver_receiveChunk> begin_receiveChunk(byte[] data, string uniqueId, int pos, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_receiveChunk(data, uniqueId, pos, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_receiveChunk(byte[] data, string uniqueId, int pos, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_receiveChunk(data, uniqueId, pos, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_receiveChunk(byte[] data, string uniqueId, int pos, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_receiveChunk(data, uniqueId, pos, context, callback, cookie, false);
        }

        public void end_receiveChunk(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _receiveChunk_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_DataReceiver_receiveChunk> begin_receiveChunk(byte[] iceP_data, string iceP_uniqueId, int iceP_pos, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_DataReceiver_receiveChunk, object>(
                (Callback_DataReceiver_receiveChunk cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _receiveChunk_name, cookie, completedCallback);
            _iceI_receiveChunk(iceP_data, iceP_uniqueId, iceP_pos, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_DataReceiver_completeTransfer> begin_completeTransfer(string uniqueId, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_completeTransfer(uniqueId, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_completeTransfer(string uniqueId, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_completeTransfer(uniqueId, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_completeTransfer(string uniqueId, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_completeTransfer(uniqueId, context, callback, cookie, false);
        }

        public void end_completeTransfer(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _completeTransfer_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_DataReceiver_completeTransfer> begin_completeTransfer(string iceP_uniqueId, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_DataReceiver_completeTransfer, object>(
                (Callback_DataReceiver_completeTransfer cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _completeTransfer_name, cookie, completedCallback);
            _iceI_completeTransfer(iceP_uniqueId, context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static DataReceiverPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            DataReceiverPrx r = b as DataReceiverPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                DataReceiverPrxHelper h = new DataReceiverPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static DataReceiverPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            DataReceiverPrx r = b as DataReceiverPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                DataReceiverPrxHelper h = new DataReceiverPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static DataReceiverPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    DataReceiverPrxHelper h = new DataReceiverPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static DataReceiverPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    DataReceiverPrxHelper h = new DataReceiverPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static DataReceiverPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            DataReceiverPrx r = b as DataReceiverPrx;
            if(r == null)
            {
                DataReceiverPrxHelper h = new DataReceiverPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static DataReceiverPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            DataReceiverPrxHelper h = new DataReceiverPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Demo::DataReceiver",
            "::Ice::Object"
        };

        public static string ice_staticId()
        {
            return _ids[0];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, DataReceiverPrx v)
        {
            ostr.writeProxy(v);
        }

        public static DataReceiverPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                DataReceiverPrxHelper result = new DataReceiverPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    [global::System.Serializable]
    public sealed class FileSenderPrxHelper : global::Ice.ObjectPrxHelperBase, FileSenderPrx
    {
        public FileSenderPrxHelper()
        {
        }

        public FileSenderPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public void sendFile(DataReceiverPrx proxy, string title, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_sendFileAsync(proxy, title, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task sendFileAsync(DataReceiverPrx proxy, string title, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_sendFileAsync(proxy, title, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_sendFileAsync(DataReceiverPrx iceP_proxy, string iceP_title, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_sendFile(iceP_proxy, iceP_title, context, synchronous, completed);
            return completed.Task;
        }

        private const string _sendFile_name = "sendFile";

        private void _iceI_sendFile(DataReceiverPrx iceP_proxy, string iceP_title, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _sendFile_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    DataReceiverPrxHelper.write(ostr, iceP_proxy);
                    ostr.writeString(iceP_title);
                });
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_FileSender_sendFile> begin_sendFile(DataReceiverPrx proxy, string title, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_sendFile(proxy, title, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_sendFile(DataReceiverPrx proxy, string title, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_sendFile(proxy, title, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_sendFile(DataReceiverPrx proxy, string title, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_sendFile(proxy, title, context, callback, cookie, false);
        }

        public void end_sendFile(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _sendFile_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_FileSender_sendFile> begin_sendFile(DataReceiverPrx iceP_proxy, string iceP_title, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_FileSender_sendFile, object>(
                (Callback_FileSender_sendFile cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _sendFile_name, cookie, completedCallback);
            _iceI_sendFile(iceP_proxy, iceP_title, context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static FileSenderPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            FileSenderPrx r = b as FileSenderPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                FileSenderPrxHelper h = new FileSenderPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static FileSenderPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            FileSenderPrx r = b as FileSenderPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                FileSenderPrxHelper h = new FileSenderPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static FileSenderPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    FileSenderPrxHelper h = new FileSenderPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static FileSenderPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    FileSenderPrxHelper h = new FileSenderPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static FileSenderPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            FileSenderPrx r = b as FileSenderPrx;
            if(r == null)
            {
                FileSenderPrxHelper h = new FileSenderPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static FileSenderPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            FileSenderPrxHelper h = new FileSenderPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Demo::FileSender",
            "::Ice::Object"
        };

        public static string ice_staticId()
        {
            return _ids[0];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, FileSenderPrx v)
        {
            ostr.writeProxy(v);
        }

        public static FileSenderPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                FileSenderPrxHelper result = new FileSenderPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    [global::System.Serializable]
    public sealed class SearchSongsPrxHelper : global::Ice.ObjectPrxHelperBase, SearchSongsPrx
    {
        public SearchSongsPrxHelper()
        {
        }

        public SearchSongsPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public string[] search(string search, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_searchAsync(search, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<string[]> searchAsync(string search, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_searchAsync(search, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<string[]> _iceI_searchAsync(string iceP_search, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_search_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<string[]>(progress, cancel);
            _iceI_search(iceP_search, context, synchronous, completed);
            return completed.Task;
        }

        private const string _search_name = "search";

        private void _iceI_search(string iceP_search, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<string[]>(completed);
            outAsync.invoke(
                _search_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_search);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    string[] ret;
                    ret = StringsHelper.read(istr);
                    return ret;
                });
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_SearchSongs_search> begin_search(string search, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_search(search, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_search(string search, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_search(search, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_search(string search, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_search(search, context, callback, cookie, false);
        }

        public string[] end_search(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _search_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<string[]>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_SearchSongs_search> begin_search(string iceP_search, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_search_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_SearchSongs_search, string[]>(
                (Callback_SearchSongs_search cb, string[] ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _search_name, cookie, completedCallback);
            _iceI_search(iceP_search, context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static SearchSongsPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            SearchSongsPrx r = b as SearchSongsPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                SearchSongsPrxHelper h = new SearchSongsPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static SearchSongsPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            SearchSongsPrx r = b as SearchSongsPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                SearchSongsPrxHelper h = new SearchSongsPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static SearchSongsPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    SearchSongsPrxHelper h = new SearchSongsPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static SearchSongsPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    SearchSongsPrxHelper h = new SearchSongsPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static SearchSongsPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            SearchSongsPrx r = b as SearchSongsPrx;
            if(r == null)
            {
                SearchSongsPrxHelper h = new SearchSongsPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static SearchSongsPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            SearchSongsPrxHelper h = new SearchSongsPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Demo::SearchSongs",
            "::Ice::Object"
        };

        public static string ice_staticId()
        {
            return _ids[0];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, SearchSongsPrx v)
        {
            ostr.writeProxy(v);
        }

        public static SearchSongsPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                SearchSongsPrxHelper result = new SearchSongsPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace Demo
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public abstract class FileTransferDisp_ : global::Ice.ObjectImpl, FileTransfer
    {
        #region Slice operations

        public abstract void sendChunk(byte[] data, string uniqueId, int pos, global::Ice.Current current = null);

        public abstract void completeTransfer(string uniqueId, string title, global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Demo::FileTransfer",
            "::Ice::Object"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[0];
        }

        public static new string ice_staticId()
        {
            return _ids[0];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_sendChunk(FileTransfer obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            byte[] iceP_data;
            string iceP_uniqueId;
            int iceP_pos;
            iceP_data = BytesHelper.read(istr);
            iceP_uniqueId = istr.readString();
            iceP_pos = istr.readInt();
            inS.endReadParams();
            obj.sendChunk(iceP_data, iceP_uniqueId, iceP_pos, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_completeTransfer(FileTransfer obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_uniqueId;
            string iceP_title;
            iceP_uniqueId = istr.readString();
            iceP_title = istr.readString();
            inS.endReadParams();
            obj.completeTransfer(iceP_uniqueId, iceP_title, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        private static readonly string[] _all =
        {
            "completeTransfer",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "sendChunk"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_completeTransfer(this, inS, current);
                }
                case 1:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 5:
                {
                    return iceD_sendChunk(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public abstract class DataReceiverDisp_ : global::Ice.ObjectImpl, DataReceiver
    {
        #region Slice operations

        public abstract void receiveChunk(byte[] data, string uniqueId, int pos, global::Ice.Current current = null);

        public abstract void completeTransfer(string uniqueId, global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Demo::DataReceiver",
            "::Ice::Object"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[0];
        }

        public static new string ice_staticId()
        {
            return _ids[0];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_receiveChunk(DataReceiver obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            byte[] iceP_data;
            string iceP_uniqueId;
            int iceP_pos;
            iceP_data = BytesHelper.read(istr);
            iceP_uniqueId = istr.readString();
            iceP_pos = istr.readInt();
            inS.endReadParams();
            obj.receiveChunk(iceP_data, iceP_uniqueId, iceP_pos, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_completeTransfer(DataReceiver obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_uniqueId;
            iceP_uniqueId = istr.readString();
            inS.endReadParams();
            obj.completeTransfer(iceP_uniqueId, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        private static readonly string[] _all =
        {
            "completeTransfer",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "receiveChunk"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_completeTransfer(this, inS, current);
                }
                case 1:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 5:
                {
                    return iceD_receiveChunk(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public abstract class FileSenderDisp_ : global::Ice.ObjectImpl, FileSender
    {
        #region Slice operations

        public abstract void sendFile(DataReceiverPrx proxy, string title, global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Demo::FileSender",
            "::Ice::Object"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[0];
        }

        public static new string ice_staticId()
        {
            return _ids[0];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_sendFile(FileSender obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            DataReceiverPrx iceP_proxy;
            string iceP_title;
            iceP_proxy = DataReceiverPrxHelper.read(istr);
            iceP_title = istr.readString();
            inS.endReadParams();
            obj.sendFile(iceP_proxy, iceP_title, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        private static readonly string[] _all =
        {
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "sendFile"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 1:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 4:
                {
                    return iceD_sendFile(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public abstract class SearchSongsDisp_ : global::Ice.ObjectImpl, SearchSongs
    {
        #region Slice operations

        public abstract string[] search(string search, global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Demo::SearchSongs",
            "::Ice::Object"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[0];
        }

        public static new string ice_staticId()
        {
            return _ids[0];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_search(SearchSongs obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_search;
            iceP_search = istr.readString();
            inS.endReadParams();
            var ret = obj.search(iceP_search, current);
            var ostr = inS.startWriteParams();
            StringsHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        private static readonly string[] _all =
        {
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "search"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 1:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 4:
                {
                    return iceD_search(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }
}
