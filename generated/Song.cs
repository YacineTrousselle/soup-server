//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Song.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace Soup
{
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [global::System.Serializable]
    public partial class SongData : global::System.ICloneable
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public string title;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public string[] artists;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public int filesize;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public SongData()
        {
            this.title = "";
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public SongData(string title, string[] artists, int filesize)
        {
            this.title = title;
            this.artists = artists;
            this.filesize = filesize;
            ice_initialize();
        }

        #endregion

        #region ICloneable members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public object Clone()
        {
            return MemberwiseClone();
        }

        #endregion

        #region Object members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public override int GetHashCode()
        {
            int h_ = 5381;
            global::IceInternal.HashUtil.hashAdd(ref h_, "::Soup::SongData");
            global::IceInternal.HashUtil.hashAdd(ref h_, title);
            global::IceInternal.HashUtil.hashAdd(ref h_, artists);
            global::IceInternal.HashUtil.hashAdd(ref h_, filesize);
            return h_;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public override bool Equals(object other)
        {
            if(object.ReferenceEquals(this, other))
            {
                return true;
            }
            if(other == null)
            {
                return false;
            }
            if(GetType() != other.GetType())
            {
                return false;
            }
            SongData o = (SongData)other;
            if(this.title == null)
            {
                if(o.title != null)
                {
                    return false;
                }
            }
            else
            {
                if(!this.title.Equals(o.title))
                {
                    return false;
                }
            }
            if(this.artists == null)
            {
                if(o.artists != null)
                {
                    return false;
                }
            }
            else
            {
                if(!IceUtilInternal.Arrays.Equals(this.artists, o.artists))
                {
                    return false;
                }
            }
            if(!this.filesize.Equals(o.filesize))
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public static bool operator==(SongData lhs, SongData rhs)
        {
            return Equals(lhs, rhs);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public static bool operator!=(SongData lhs, SongData rhs)
        {
            return !Equals(lhs, rhs);
        }

        #endregion

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public void ice_writeMembers(global::Ice.OutputStream ostr)
        {
            ostr.writeString(this.title);
            StringsHelper.write(ostr, this.artists);
            ostr.writeInt(this.filesize);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public void ice_readMembers(global::Ice.InputStream istr)
        {
            this.title = istr.readString();
            this.artists = StringsHelper.read(istr);
            this.filesize = istr.readInt();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public static void ice_write(global::Ice.OutputStream ostr, SongData v)
        {
            if(v == null)
            {
                _nullMarshalValue.ice_writeMembers(ostr);
            }
            else
            {
                v.ice_writeMembers(ostr);
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        public static SongData ice_read(global::Ice.InputStream istr)
        {
            var v = new SongData();
            v.ice_readMembers(istr);
            return v;
        }

        private static readonly SongData _nullMarshalValue = new SongData();

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface FileUploader : global::Ice.Object, FileUploaderOperations_
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface FileDownloader : global::Ice.Object, FileDownloaderOperations_
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface FileSender : global::Ice.Object, FileSenderOperations_
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface SongDataModule : global::Ice.Object, SongDataModuleOperations_
    {
    }
}

namespace Soup
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_FileUploader_startUpload(string ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_FileUploader_sendChunk();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_FileUploader_completeUpload();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_FileDownloader_startDownload();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_FileDownloader_sendPacket();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_FileDownloader_endDownload();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_FileSender_sendFile();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_SongDataModule_searchByTitle(SongData[] ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_SongDataModule_searchByArtist(SongData[] ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_SongDataModule_updateSong();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public delegate void Callback_SongDataModule_deleteSong();
}

namespace Soup
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface FileUploaderPrx : global::Ice.ObjectPrx
    {
        string startUpload(SongData songData, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<string> startUploadAsync(SongData songData, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_FileUploader_startUpload> begin_startUpload(SongData songData, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_startUpload(SongData songData, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_startUpload(SongData songData, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        string end_startUpload(global::Ice.AsyncResult asyncResult);

        void sendChunk(byte[] data, string uniqueId, int pos, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task sendChunkAsync(byte[] data, string uniqueId, int pos, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_FileUploader_sendChunk> begin_sendChunk(byte[] data, string uniqueId, int pos, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_sendChunk(byte[] data, string uniqueId, int pos, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_sendChunk(byte[] data, string uniqueId, int pos, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_sendChunk(global::Ice.AsyncResult asyncResult);

        void completeUpload(string uniqueId, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task completeUploadAsync(string uniqueId, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_FileUploader_completeUpload> begin_completeUpload(string uniqueId, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_completeUpload(string uniqueId, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_completeUpload(string uniqueId, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_completeUpload(global::Ice.AsyncResult asyncResult);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface FileDownloaderPrx : global::Ice.ObjectPrx
    {
        void startDownload(SongData songData, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task startDownloadAsync(SongData songData, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_FileDownloader_startDownload> begin_startDownload(SongData songData, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_startDownload(SongData songData, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_startDownload(SongData songData, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_startDownload(global::Ice.AsyncResult asyncResult);

        void sendPacket(byte[] data, int pos, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task sendPacketAsync(byte[] data, int pos, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_FileDownloader_sendPacket> begin_sendPacket(byte[] data, int pos, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_sendPacket(byte[] data, int pos, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_sendPacket(byte[] data, int pos, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_sendPacket(global::Ice.AsyncResult asyncResult);

        void endDownload(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task endDownloadAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_FileDownloader_endDownload> begin_endDownload(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_endDownload(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_endDownload(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_endDownload(global::Ice.AsyncResult asyncResult);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface FileSenderPrx : global::Ice.ObjectPrx
    {
        void sendFile(FileDownloaderPrx proxy, string songId, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task sendFileAsync(FileDownloaderPrx proxy, string songId, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_FileSender_sendFile> begin_sendFile(FileDownloaderPrx proxy, string songId, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_sendFile(FileDownloaderPrx proxy, string songId, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_sendFile(FileDownloaderPrx proxy, string songId, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_sendFile(global::Ice.AsyncResult asyncResult);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface SongDataModulePrx : global::Ice.ObjectPrx
    {
        SongData[] searchByTitle(string search, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<SongData[]> searchByTitleAsync(string search, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_SongDataModule_searchByTitle> begin_searchByTitle(string search, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_searchByTitle(string search, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_searchByTitle(string search, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        SongData[] end_searchByTitle(global::Ice.AsyncResult asyncResult);

        SongData[] searchByArtist(string search, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<SongData[]> searchByArtistAsync(string search, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_SongDataModule_searchByArtist> begin_searchByArtist(string search, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_searchByArtist(string search, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_searchByArtist(string search, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        SongData[] end_searchByArtist(global::Ice.AsyncResult asyncResult);

        void updateSong(SongData songData, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task updateSongAsync(SongData songData, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_SongDataModule_updateSong> begin_updateSong(SongData songData, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_updateSong(SongData songData, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_updateSong(SongData songData, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_updateSong(global::Ice.AsyncResult asyncResult);

        void deleteSong(string songId, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task deleteSongAsync(string songId, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_SongDataModule_deleteSong> begin_deleteSong(string songId, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_deleteSong(string songId, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_deleteSong(string songId, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_deleteSong(global::Ice.AsyncResult asyncResult);
    }
}

namespace Soup
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface FileUploaderOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        string startUpload(SongData songData, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void sendChunk(byte[] data, string uniqueId, int pos, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void completeUpload(string uniqueId, global::Ice.Current current = null);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface FileDownloaderOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void startDownload(SongData songData, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void sendPacket(byte[] data, int pos, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void endDownload(global::Ice.Current current = null);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface FileSenderOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void sendFile(FileDownloaderPrx proxy, string songId, global::Ice.Current current = null);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public interface SongDataModuleOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        SongData[] searchByTitle(string search, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        SongData[] searchByArtist(string search, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void updateSong(SongData songData, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
        void deleteSong(string songId, global::Ice.Current current = null);
    }
}

namespace Soup
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public sealed class BytesHelper
    {
        public static void write(global::Ice.OutputStream ostr, byte[] v)
        {
            ostr.writeByteSeq(v);
        }

        public static byte[] read(global::Ice.InputStream istr)
        {
            byte[] v;
            v = istr.readByteSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public sealed class StringsHelper
    {
        public static void write(global::Ice.OutputStream ostr, string[] v)
        {
            ostr.writeStringSeq(v);
        }

        public static string[] read(global::Ice.InputStream istr)
        {
            string[] v;
            v = istr.readStringSeq();
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public sealed class SongsHelper
    {
        public static void write(global::Ice.OutputStream ostr, SongData[] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    (v[ix] == null ? new SongData() : v[ix]).ice_writeMembers(ostr);
                }
            }
        }

        public static SongData[] read(global::Ice.InputStream istr)
        {
            SongData[] v;
            {
                int szx = istr.readAndCheckSeqSize(6);
                v = new SongData[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = new SongData();
                    v[ix].ice_readMembers(istr);
                }
            }
            return v;
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    [global::System.Serializable]
    public sealed class FileUploaderPrxHelper : global::Ice.ObjectPrxHelperBase, FileUploaderPrx
    {
        public FileUploaderPrxHelper()
        {
        }

        public FileUploaderPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public string startUpload(SongData songData, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_startUploadAsync(songData, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void sendChunk(byte[] data, string uniqueId, int pos, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_sendChunkAsync(data, uniqueId, pos, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void completeUpload(string uniqueId, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_completeUploadAsync(uniqueId, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<string> startUploadAsync(SongData songData, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_startUploadAsync(songData, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<string> _iceI_startUploadAsync(SongData iceP_songData, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_startUpload_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
            _iceI_startUpload(iceP_songData, context, synchronous, completed);
            return completed.Task;
        }

        private const string _startUpload_name = "startUpload";

        private void _iceI_startUpload(SongData iceP_songData, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<string>(completed);
            outAsync.invoke(
                _startUpload_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    SongData.ice_write(ostr, iceP_songData);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    string ret;
                    ret = istr.readString();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task sendChunkAsync(byte[] data, string uniqueId, int pos, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_sendChunkAsync(data, uniqueId, pos, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_sendChunkAsync(byte[] iceP_data, string iceP_uniqueId, int iceP_pos, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_sendChunk(iceP_data, iceP_uniqueId, iceP_pos, context, synchronous, completed);
            return completed.Task;
        }

        private const string _sendChunk_name = "sendChunk";

        private void _iceI_sendChunk(byte[] iceP_data, string iceP_uniqueId, int iceP_pos, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _sendChunk_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    BytesHelper.write(ostr, iceP_data);
                    ostr.writeString(iceP_uniqueId);
                    ostr.writeInt(iceP_pos);
                });
        }

        public global::System.Threading.Tasks.Task completeUploadAsync(string uniqueId, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_completeUploadAsync(uniqueId, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_completeUploadAsync(string iceP_uniqueId, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_completeUpload(iceP_uniqueId, context, synchronous, completed);
            return completed.Task;
        }

        private const string _completeUpload_name = "completeUpload";

        private void _iceI_completeUpload(string iceP_uniqueId, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _completeUpload_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_uniqueId);
                });
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_FileUploader_startUpload> begin_startUpload(SongData songData, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_startUpload(songData, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_startUpload(SongData songData, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_startUpload(songData, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_startUpload(SongData songData, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_startUpload(songData, context, callback, cookie, false);
        }

        public string end_startUpload(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _startUpload_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_FileUploader_startUpload> begin_startUpload(SongData iceP_songData, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_startUpload_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_FileUploader_startUpload, string>(
                (Callback_FileUploader_startUpload cb, string ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _startUpload_name, cookie, completedCallback);
            _iceI_startUpload(iceP_songData, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_FileUploader_sendChunk> begin_sendChunk(byte[] data, string uniqueId, int pos, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_sendChunk(data, uniqueId, pos, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_sendChunk(byte[] data, string uniqueId, int pos, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_sendChunk(data, uniqueId, pos, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_sendChunk(byte[] data, string uniqueId, int pos, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_sendChunk(data, uniqueId, pos, context, callback, cookie, false);
        }

        public void end_sendChunk(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _sendChunk_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_FileUploader_sendChunk> begin_sendChunk(byte[] iceP_data, string iceP_uniqueId, int iceP_pos, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_FileUploader_sendChunk, object>(
                (Callback_FileUploader_sendChunk cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _sendChunk_name, cookie, completedCallback);
            _iceI_sendChunk(iceP_data, iceP_uniqueId, iceP_pos, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_FileUploader_completeUpload> begin_completeUpload(string uniqueId, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_completeUpload(uniqueId, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_completeUpload(string uniqueId, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_completeUpload(uniqueId, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_completeUpload(string uniqueId, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_completeUpload(uniqueId, context, callback, cookie, false);
        }

        public void end_completeUpload(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _completeUpload_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_FileUploader_completeUpload> begin_completeUpload(string iceP_uniqueId, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_FileUploader_completeUpload, object>(
                (Callback_FileUploader_completeUpload cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _completeUpload_name, cookie, completedCallback);
            _iceI_completeUpload(iceP_uniqueId, context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static FileUploaderPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            FileUploaderPrx r = b as FileUploaderPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                FileUploaderPrxHelper h = new FileUploaderPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static FileUploaderPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            FileUploaderPrx r = b as FileUploaderPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                FileUploaderPrxHelper h = new FileUploaderPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static FileUploaderPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    FileUploaderPrxHelper h = new FileUploaderPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static FileUploaderPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    FileUploaderPrxHelper h = new FileUploaderPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static FileUploaderPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            FileUploaderPrx r = b as FileUploaderPrx;
            if(r == null)
            {
                FileUploaderPrxHelper h = new FileUploaderPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static FileUploaderPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            FileUploaderPrxHelper h = new FileUploaderPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Soup::FileUploader"
        };

        public static string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, FileUploaderPrx v)
        {
            ostr.writeProxy(v);
        }

        public static FileUploaderPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                FileUploaderPrxHelper result = new FileUploaderPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    [global::System.Serializable]
    public sealed class FileDownloaderPrxHelper : global::Ice.ObjectPrxHelperBase, FileDownloaderPrx
    {
        public FileDownloaderPrxHelper()
        {
        }

        public FileDownloaderPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public void startDownload(SongData songData, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_startDownloadAsync(songData, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void sendPacket(byte[] data, int pos, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_sendPacketAsync(data, pos, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void endDownload(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_endDownloadAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task startDownloadAsync(SongData songData, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_startDownloadAsync(songData, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_startDownloadAsync(SongData iceP_songData, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_startDownload(iceP_songData, context, synchronous, completed);
            return completed.Task;
        }

        private const string _startDownload_name = "startDownload";

        private void _iceI_startDownload(SongData iceP_songData, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _startDownload_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    SongData.ice_write(ostr, iceP_songData);
                });
        }

        public global::System.Threading.Tasks.Task sendPacketAsync(byte[] data, int pos, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_sendPacketAsync(data, pos, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_sendPacketAsync(byte[] iceP_data, int iceP_pos, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_sendPacket(iceP_data, iceP_pos, context, synchronous, completed);
            return completed.Task;
        }

        private const string _sendPacket_name = "sendPacket";

        private void _iceI_sendPacket(byte[] iceP_data, int iceP_pos, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _sendPacket_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    BytesHelper.write(ostr, iceP_data);
                    ostr.writeInt(iceP_pos);
                });
        }

        public global::System.Threading.Tasks.Task endDownloadAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_endDownloadAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_endDownloadAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_endDownload(context, synchronous, completed);
            return completed.Task;
        }

        private const string _endDownload_name = "endDownload";

        private void _iceI_endDownload(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _endDownload_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_FileDownloader_startDownload> begin_startDownload(SongData songData, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_startDownload(songData, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_startDownload(SongData songData, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_startDownload(songData, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_startDownload(SongData songData, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_startDownload(songData, context, callback, cookie, false);
        }

        public void end_startDownload(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _startDownload_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_FileDownloader_startDownload> begin_startDownload(SongData iceP_songData, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_FileDownloader_startDownload, object>(
                (Callback_FileDownloader_startDownload cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _startDownload_name, cookie, completedCallback);
            _iceI_startDownload(iceP_songData, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_FileDownloader_sendPacket> begin_sendPacket(byte[] data, int pos, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_sendPacket(data, pos, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_sendPacket(byte[] data, int pos, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_sendPacket(data, pos, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_sendPacket(byte[] data, int pos, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_sendPacket(data, pos, context, callback, cookie, false);
        }

        public void end_sendPacket(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _sendPacket_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_FileDownloader_sendPacket> begin_sendPacket(byte[] iceP_data, int iceP_pos, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_FileDownloader_sendPacket, object>(
                (Callback_FileDownloader_sendPacket cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _sendPacket_name, cookie, completedCallback);
            _iceI_sendPacket(iceP_data, iceP_pos, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_FileDownloader_endDownload> begin_endDownload(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_endDownload(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_endDownload(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_endDownload(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_endDownload(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_endDownload(context, callback, cookie, false);
        }

        public void end_endDownload(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _endDownload_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_FileDownloader_endDownload> begin_endDownload(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_FileDownloader_endDownload, object>(
                (Callback_FileDownloader_endDownload cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _endDownload_name, cookie, completedCallback);
            _iceI_endDownload(context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static FileDownloaderPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            FileDownloaderPrx r = b as FileDownloaderPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                FileDownloaderPrxHelper h = new FileDownloaderPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static FileDownloaderPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            FileDownloaderPrx r = b as FileDownloaderPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                FileDownloaderPrxHelper h = new FileDownloaderPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static FileDownloaderPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    FileDownloaderPrxHelper h = new FileDownloaderPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static FileDownloaderPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    FileDownloaderPrxHelper h = new FileDownloaderPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static FileDownloaderPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            FileDownloaderPrx r = b as FileDownloaderPrx;
            if(r == null)
            {
                FileDownloaderPrxHelper h = new FileDownloaderPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static FileDownloaderPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            FileDownloaderPrxHelper h = new FileDownloaderPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Soup::FileDownloader"
        };

        public static string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, FileDownloaderPrx v)
        {
            ostr.writeProxy(v);
        }

        public static FileDownloaderPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                FileDownloaderPrxHelper result = new FileDownloaderPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    [global::System.Serializable]
    public sealed class FileSenderPrxHelper : global::Ice.ObjectPrxHelperBase, FileSenderPrx
    {
        public FileSenderPrxHelper()
        {
        }

        public FileSenderPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public void sendFile(FileDownloaderPrx proxy, string songId, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_sendFileAsync(proxy, songId, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task sendFileAsync(FileDownloaderPrx proxy, string songId, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_sendFileAsync(proxy, songId, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_sendFileAsync(FileDownloaderPrx iceP_proxy, string iceP_songId, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_sendFile(iceP_proxy, iceP_songId, context, synchronous, completed);
            return completed.Task;
        }

        private const string _sendFile_name = "sendFile";

        private void _iceI_sendFile(FileDownloaderPrx iceP_proxy, string iceP_songId, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _sendFile_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    FileDownloaderPrxHelper.write(ostr, iceP_proxy);
                    ostr.writeString(iceP_songId);
                });
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_FileSender_sendFile> begin_sendFile(FileDownloaderPrx proxy, string songId, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_sendFile(proxy, songId, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_sendFile(FileDownloaderPrx proxy, string songId, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_sendFile(proxy, songId, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_sendFile(FileDownloaderPrx proxy, string songId, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_sendFile(proxy, songId, context, callback, cookie, false);
        }

        public void end_sendFile(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _sendFile_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_FileSender_sendFile> begin_sendFile(FileDownloaderPrx iceP_proxy, string iceP_songId, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_FileSender_sendFile, object>(
                (Callback_FileSender_sendFile cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _sendFile_name, cookie, completedCallback);
            _iceI_sendFile(iceP_proxy, iceP_songId, context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static FileSenderPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            FileSenderPrx r = b as FileSenderPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                FileSenderPrxHelper h = new FileSenderPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static FileSenderPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            FileSenderPrx r = b as FileSenderPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                FileSenderPrxHelper h = new FileSenderPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static FileSenderPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    FileSenderPrxHelper h = new FileSenderPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static FileSenderPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    FileSenderPrxHelper h = new FileSenderPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static FileSenderPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            FileSenderPrx r = b as FileSenderPrx;
            if(r == null)
            {
                FileSenderPrxHelper h = new FileSenderPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static FileSenderPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            FileSenderPrxHelper h = new FileSenderPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Soup::FileSender"
        };

        public static string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, FileSenderPrx v)
        {
            ostr.writeProxy(v);
        }

        public static FileSenderPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                FileSenderPrxHelper result = new FileSenderPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    [global::System.Serializable]
    public sealed class SongDataModulePrxHelper : global::Ice.ObjectPrxHelperBase, SongDataModulePrx
    {
        public SongDataModulePrxHelper()
        {
        }

        public SongDataModulePrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public SongData[] searchByTitle(string search, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_searchByTitleAsync(search, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public SongData[] searchByArtist(string search, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_searchByArtistAsync(search, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void updateSong(SongData songData, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_updateSongAsync(songData, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void deleteSong(string songId, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_deleteSongAsync(songId, context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<SongData[]> searchByTitleAsync(string search, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_searchByTitleAsync(search, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<SongData[]> _iceI_searchByTitleAsync(string iceP_search, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_searchByTitle_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<SongData[]>(progress, cancel);
            _iceI_searchByTitle(iceP_search, context, synchronous, completed);
            return completed.Task;
        }

        private const string _searchByTitle_name = "searchByTitle";

        private void _iceI_searchByTitle(string iceP_search, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<SongData[]>(completed);
            outAsync.invoke(
                _searchByTitle_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_search);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    SongData[] ret;
                    ret = SongsHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<SongData[]> searchByArtistAsync(string search, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_searchByArtistAsync(search, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<SongData[]> _iceI_searchByArtistAsync(string iceP_search, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_searchByArtist_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<SongData[]>(progress, cancel);
            _iceI_searchByArtist(iceP_search, context, synchronous, completed);
            return completed.Task;
        }

        private const string _searchByArtist_name = "searchByArtist";

        private void _iceI_searchByArtist(string iceP_search, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<SongData[]>(completed);
            outAsync.invoke(
                _searchByArtist_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_search);
                },
                read: (global::Ice.InputStream istr) =>
                {
                    SongData[] ret;
                    ret = SongsHelper.read(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task updateSongAsync(SongData songData, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_updateSongAsync(songData, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_updateSongAsync(SongData iceP_songData, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_updateSong(iceP_songData, context, synchronous, completed);
            return completed.Task;
        }

        private const string _updateSong_name = "updateSong";

        private void _iceI_updateSong(SongData iceP_songData, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _updateSong_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    SongData.ice_write(ostr, iceP_songData);
                });
        }

        public global::System.Threading.Tasks.Task deleteSongAsync(string songId, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_deleteSongAsync(songId, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_deleteSongAsync(string iceP_songId, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_deleteSong(iceP_songId, context, synchronous, completed);
            return completed.Task;
        }

        private const string _deleteSong_name = "deleteSong";

        private void _iceI_deleteSong(string iceP_songId, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _deleteSong_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_songId);
                });
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_SongDataModule_searchByTitle> begin_searchByTitle(string search, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_searchByTitle(search, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_searchByTitle(string search, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_searchByTitle(search, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_searchByTitle(string search, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_searchByTitle(search, context, callback, cookie, false);
        }

        public SongData[] end_searchByTitle(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _searchByTitle_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<SongData[]>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_SongDataModule_searchByTitle> begin_searchByTitle(string iceP_search, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_searchByTitle_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_SongDataModule_searchByTitle, SongData[]>(
                (Callback_SongDataModule_searchByTitle cb, SongData[] ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _searchByTitle_name, cookie, completedCallback);
            _iceI_searchByTitle(iceP_search, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_SongDataModule_searchByArtist> begin_searchByArtist(string search, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_searchByArtist(search, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_searchByArtist(string search, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_searchByArtist(search, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_searchByArtist(string search, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_searchByArtist(search, context, callback, cookie, false);
        }

        public SongData[] end_searchByArtist(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _searchByArtist_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<SongData[]>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_SongDataModule_searchByArtist> begin_searchByArtist(string iceP_search, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_searchByArtist_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_SongDataModule_searchByArtist, SongData[]>(
                (Callback_SongDataModule_searchByArtist cb, SongData[] ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _searchByArtist_name, cookie, completedCallback);
            _iceI_searchByArtist(iceP_search, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_SongDataModule_updateSong> begin_updateSong(SongData songData, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_updateSong(songData, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_updateSong(SongData songData, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_updateSong(songData, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_updateSong(SongData songData, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_updateSong(songData, context, callback, cookie, false);
        }

        public void end_updateSong(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _updateSong_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_SongDataModule_updateSong> begin_updateSong(SongData iceP_songData, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_SongDataModule_updateSong, object>(
                (Callback_SongDataModule_updateSong cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _updateSong_name, cookie, completedCallback);
            _iceI_updateSong(iceP_songData, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_SongDataModule_deleteSong> begin_deleteSong(string songId, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_deleteSong(songId, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_deleteSong(string songId, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_deleteSong(songId, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_deleteSong(string songId, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_deleteSong(songId, context, callback, cookie, false);
        }

        public void end_deleteSong(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _deleteSong_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_SongDataModule_deleteSong> begin_deleteSong(string iceP_songId, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_SongDataModule_deleteSong, object>(
                (Callback_SongDataModule_deleteSong cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _deleteSong_name, cookie, completedCallback);
            _iceI_deleteSong(iceP_songId, context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static SongDataModulePrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            SongDataModulePrx r = b as SongDataModulePrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                SongDataModulePrxHelper h = new SongDataModulePrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static SongDataModulePrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            SongDataModulePrx r = b as SongDataModulePrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                SongDataModulePrxHelper h = new SongDataModulePrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static SongDataModulePrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    SongDataModulePrxHelper h = new SongDataModulePrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static SongDataModulePrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    SongDataModulePrxHelper h = new SongDataModulePrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static SongDataModulePrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            SongDataModulePrx r = b as SongDataModulePrx;
            if(r == null)
            {
                SongDataModulePrxHelper h = new SongDataModulePrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static SongDataModulePrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            SongDataModulePrxHelper h = new SongDataModulePrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Soup::SongDataModule"
        };

        public static string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, SongDataModulePrx v)
        {
            ostr.writeProxy(v);
        }

        public static SongDataModulePrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                SongDataModulePrxHelper result = new SongDataModulePrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace Soup
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public abstract class FileUploaderDisp_ : global::Ice.ObjectImpl, FileUploader
    {
        #region Slice operations

        public abstract string startUpload(SongData songData, global::Ice.Current current = null);

        public abstract void sendChunk(byte[] data, string uniqueId, int pos, global::Ice.Current current = null);

        public abstract void completeUpload(string uniqueId, global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Soup::FileUploader"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[1];
        }

        public static new string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_startUpload(FileUploader obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            SongData iceP_songData;
            iceP_songData = null;
            iceP_songData = SongData.ice_read(istr);
            inS.endReadParams();
            var ret = obj.startUpload(iceP_songData, current);
            var ostr = inS.startWriteParams();
            ostr.writeString(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_sendChunk(FileUploader obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            byte[] iceP_data;
            string iceP_uniqueId;
            int iceP_pos;
            iceP_data = BytesHelper.read(istr);
            iceP_uniqueId = istr.readString();
            iceP_pos = istr.readInt();
            inS.endReadParams();
            obj.sendChunk(iceP_data, iceP_uniqueId, iceP_pos, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_completeUpload(FileUploader obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_uniqueId;
            iceP_uniqueId = istr.readString();
            inS.endReadParams();
            obj.completeUpload(iceP_uniqueId, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        private static readonly string[] _all =
        {
            "completeUpload",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "sendChunk",
            "startUpload"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_completeUpload(this, inS, current);
                }
                case 1:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 5:
                {
                    return iceD_sendChunk(this, inS, current);
                }
                case 6:
                {
                    return iceD_startUpload(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public abstract class FileDownloaderDisp_ : global::Ice.ObjectImpl, FileDownloader
    {
        #region Slice operations

        public abstract void startDownload(SongData songData, global::Ice.Current current = null);

        public abstract void sendPacket(byte[] data, int pos, global::Ice.Current current = null);

        public abstract void endDownload(global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Soup::FileDownloader"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[1];
        }

        public static new string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_startDownload(FileDownloader obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            SongData iceP_songData;
            iceP_songData = null;
            iceP_songData = SongData.ice_read(istr);
            inS.endReadParams();
            obj.startDownload(iceP_songData, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_sendPacket(FileDownloader obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            byte[] iceP_data;
            int iceP_pos;
            iceP_data = BytesHelper.read(istr);
            iceP_pos = istr.readInt();
            inS.endReadParams();
            obj.sendPacket(iceP_data, iceP_pos, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_endDownload(FileDownloader obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.endDownload(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        private static readonly string[] _all =
        {
            "endDownload",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "sendPacket",
            "startDownload"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_endDownload(this, inS, current);
                }
                case 1:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 5:
                {
                    return iceD_sendPacket(this, inS, current);
                }
                case 6:
                {
                    return iceD_startDownload(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public abstract class FileSenderDisp_ : global::Ice.ObjectImpl, FileSender
    {
        #region Slice operations

        public abstract void sendFile(FileDownloaderPrx proxy, string songId, global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Soup::FileSender"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[1];
        }

        public static new string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_sendFile(FileSender obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            FileDownloaderPrx iceP_proxy;
            string iceP_songId;
            iceP_proxy = FileDownloaderPrxHelper.read(istr);
            iceP_songId = istr.readString();
            inS.endReadParams();
            obj.sendFile(iceP_proxy, iceP_songId, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        private static readonly string[] _all =
        {
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "sendFile"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 1:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 4:
                {
                    return iceD_sendFile(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.10")]
    public abstract class SongDataModuleDisp_ : global::Ice.ObjectImpl, SongDataModule
    {
        #region Slice operations

        public abstract SongData[] searchByTitle(string search, global::Ice.Current current = null);

        public abstract SongData[] searchByArtist(string search, global::Ice.Current current = null);

        public abstract void updateSong(SongData songData, global::Ice.Current current = null);

        public abstract void deleteSong(string songId, global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Soup::SongDataModule"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[1];
        }

        public static new string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_searchByTitle(SongDataModule obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_search;
            iceP_search = istr.readString();
            inS.endReadParams();
            var ret = obj.searchByTitle(iceP_search, current);
            var ostr = inS.startWriteParams();
            SongsHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_searchByArtist(SongDataModule obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_search;
            iceP_search = istr.readString();
            inS.endReadParams();
            var ret = obj.searchByArtist(iceP_search, current);
            var ostr = inS.startWriteParams();
            SongsHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_updateSong(SongDataModule obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            SongData iceP_songData;
            iceP_songData = null;
            iceP_songData = SongData.ice_read(istr);
            inS.endReadParams();
            obj.updateSong(iceP_songData, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_deleteSong(SongDataModule obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_songId;
            iceP_songId = istr.readString();
            inS.endReadParams();
            obj.deleteSong(iceP_songId, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        private static readonly string[] _all =
        {
            "deleteSong",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "searchByArtist",
            "searchByTitle",
            "updateSong"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_deleteSong(this, inS, current);
                }
                case 1:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 5:
                {
                    return iceD_searchByArtist(this, inS, current);
                }
                case 6:
                {
                    return iceD_searchByTitle(this, inS, current);
                }
                case 7:
                {
                    return iceD_updateSong(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }
}
